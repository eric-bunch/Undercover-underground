def answer(N, K):
	
	import math
	import itertools
	#import scipy
	#from scipy import special
	
	
	
	def binom(a, b):
	
		if a < b:
			return 0
		else:
			x = math.factorial(a)
			y = math.factorial(b)
			z = math.factorial(a - b)
			
		div = x // (y*z)
		return div
	

	def add(u):
		return [ u[0][0]*u[1][0], u[0][1] + u[1][1], u[0][2] + u[1][2] ]

	
	
	def inner_add(coords):
		#dim = len(coords)
		#print "coords: ",coords
		coeff = reduce(lambda a, b: a*b, [su[i - 1][0] for i in coords], 1) * binom(sum(su[i - 1][1] for i in coords), K)
		return coeff
		
	
	
	def multinomial(n, part):
	
		a = math.factorial(n)
		b = reduce(lambda x, y: x*y, [math.factorial(t) for t in part], 1)
		return a // b
		
	
	
		
	def compute_coeff(partition):
		
		print "type: ",type(partition)
		n = sum(partition)
		m = multinomial(n, partition)
		#len_partition = len(partition)
		y_power = sum(binom(t, 2)*partition[t - 1] for t in range(1, N + 1))
		c = binom(y_power, K)
		d = reduce(lambda a, b: a*b, [ ( 1/float(math.factorial(t)) )**partition[t - 1] for t in range(1, N)], 1)
		coeff = m*c*d
		return coeff
		
		
	
	
	def mult(s, t):
		
		"""
		temp = []
		
		for a in t:
			for b in s:
				if a[2] + b[2] <= N:
					temp.append([a[0] * b[0], a[1] + b[1], a[2] + b[2]])
		"""
		
		#temp = [ [a[0] * b[0], a[1] + b[1], a[2] + b[2]] for a in t for b in s if a[2] + b[2] <= N ]
		
		y = itertools.product(s, t)
		z = itertools.ifilter(lambda x: x[0][2] + x[1][2] <= N, y)
		temp = map(add, z)
		
					
		return temp
	
	
	"""
	def exponentials(s, t, x_N, countdown):
		
		x_N += [a for a in t if a[2] == N]
		
		temp = mult(s[:countdown +1], t)
		
		if countdown == 0:
			return x_N
		else:
			return exponentials(s, temp, x_N, countdown - 1)
	"""
	
	
	def expls_sum(s, t, run_sum, count):
		

#		print "t: ",t
#		print "count: ",count
#		print "(-1)**(count + 1)/float(count): ",(-1)**(count + 1)/float(count)
#		print "[term for term in t if term[2] == N]: ",[term for term in t if term[2] == N]
#		for term in t:
#			print "term: ",term
#			print "term[0]: ",term[0]
#			print "K: ",K
#			print "binom(term[1], K): ",binom(term[1], K)
#			print "term[0]*binom(term[1], K): ",term[0]*binom(term[1], K)

		run_sum += ( (-1)**(count + 1)/float(count) ) * sum( term[0]*binom(term[1], K) for term in t if term[2] == N )
		
#		print "run_sum: ",run_sum
		
		
		if count == N:
			return run_sum
		else:
			temp = mult(s[:N-count], [term for term in t if term[2] != N])
			return expls_sum(s, temp, run_sum, count + 1)
	
	

	
	summation = [[1/(float(math.factorial(i))), binom(i, 2), i] for i in range(1, N + 1)]
	summ_copy = [[1/(float(math.factorial(i))), binom(i, 2), i] for i in range(1, N + 1)]
	su = [ [1/(float(math.factorial(i))), binom(i, 2)] for i in range(1, N + 1) ]
	
	#print "su: ",su
	
	big_run_sum = 0
	

	for n in range(1, N + 1):
		
		small_run_sum = 0
		y = itertools.product(xrange(0, N + 1), repeat=N)
		z = itertools.ifilter(lambda a: sum(a) == n, y)
		w = itertools.ifilter(lambda a: sum( (index + 1)* item for index, item in enumerate(a)) == N, z)
		
		"""
		print "printing w: "
		for a in w:
			print a
		"""
		#l = map(inner_add, w)
		
		small_run_sum += sum( map(compute_coeff, w) )
		"""
		for term in w:
			print "something is in w"
			small_run_sum += compute_coeff(n, term)
		"""
		#run_sum += ( (-1)**(n + 1) / float(n) ) * sum(l)
		big_run_sum += ( (-1)**(n + 1) / float(n) ) * small_run_sum

	
	#running_sum_x_N = expls_sum(summation, summ_copy, 0, 1)
	
	#x_to_N = exponentials(summation, summ_copy, [], N)
	
	#x_to_N = [entry[0] * scipy.special.binom(entry[1], K) for entry in x_to_N]
	
	#len_x_to_N = len(x_to_N)
	
	#return str( int( math.factorial(N) * sum( (((-1)**index)/float(index + 1)) * x_to_N[index] for index in range(0, len_x_to_N) ) ) )
	
#	print "math.factorial(",N,"): ",math.factorial(N)
	
	#return int( math.factorial(N) * running_sum_x_N )
	#return str( int( math.factorial(N) * run_sum ) )
	return str( int( math.factorial(N) * big_run_sum ) )
	
	
	
	
	
print "N = 2, K = 1: ",answer(2, 1)
#print "type: ",type(answer(2,1))
print "N = 4, K = 3: ",answer(4, 3)	
#print "type: ",type(answer(2,1))
print "N = 20, K = 19: ",answer(20, 19)
print "N = 20, K = 50: ",answer(20, 50)
print "N = 20, K = 120: ",answer(20, 120)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
