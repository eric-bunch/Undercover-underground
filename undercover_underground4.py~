def answer(N, K):
    
    import math
    import itertools
    import copy
    #import scipy
    #from scipy import special
    
    def binom(a, b):
        
        if b > a:
            return 0
        else:
            x = math.factorial(a)
            y = math.factorial(b)
            z = math.factorial(a - b)
            return x // (y*z)
        
    
    
    def add(u):
        return [ u[0][0]*u[1][0], u[0][1] + u[0][1], u[0][2] + u[1][2] ]
        
        
    def inner_add(coords):
        coeff = reduce(lambda a, b: a*b, [su[i - 1][0] for i in coords], 1) * binom(sum(su[i - 1][1] for i in coords), K)
        
    
    def mult(s, t):
        #temp = []
        
        """
        for a in t:
            for b in s:
                if a[2] + b[2] <= N:
                    temp.append([ a[0]*b[0], a[1] + b[1], a[2] + b[2] ])
        """
        
        #temp = [ [ a[0]*b[0], a[1]+b[1], a[2]+b[2] ] for a in t for b in s if a[2]+b[2] <= N ]
        
        
        y = itertools.product(s, t)
        z = itertools.ifilter(lambda x: x[0][2] + x[1][2] <= N, y)
        #temp = iter(map(add, z))
        #temp = (add(a) for a in z)
        #temp = ((u[0][0]*u[1][0], u[0][1] + u[0][1], u[0][2] + u[1][2]) for u in z)
        #temp = itertools.imap(add, z)
        temp = map(add, z)
        
        return temp
        
        
    max_list_length = 43000
    
    
    def hash_too_long(h):
        
        for key in h.keys():
            if len(h[key]) > max_list_length:
                return key
        else:
            return -1
    
    
    """
    def exponentials(s, t, x_N, countdown):
        
        x_N += [a for a in t if a[2] == N]
        
        temp = mult(s[:countdown + 1], t)
        
        if countdown == 0:
            return x_N
        else:
            return exponentials(s, temp, x_N, countdown - 1)
    
    """
    
    def expls_sum(s, t, run_sum):
    #def expls_sum(s, sHash, run_sum, count):
    
        #t_temp_iter1, t_temp_iter2 = itertools.tee(t)
        
        
        #tempHash = copy.copy(sHash)
        
        #t_list = list(t)
        t_list = copy.copy(t)
        
        for count in range(1, N + 1):    
            
            
            
            #run_sum += ( (-1)**(count + 1)/float(count) ) * sum( term[0]*binom(term[1], K) for term in t_temp_iter1 if term[2] == N )
            run_sum += ( (-1)**(count + 1)/float(count) ) * sum( term[0]*binom(term[1], K) for term in t_list if term[2] == N )
            
            #for key in tempHash.keys():
            #    run_sum += ( (-1)**(count + 1)/float(count) ) * sum( term[0]*binom(term[1], K) for term in tempHash[key] if term[2] == N )
            
            #s_temp_iter1, s_temp_iter2 = itertools.tee(s)
            
            if count == N :
                return run_sum
            else:
                #temp = mult(s[:N-count], [term for term in t if term[2] != N])
                #temp = mult(s[:N-count], iter([term for term in t_list if term[2] != N]))
                t_list = mult(s[:N-count], [term for term in t_list if term[2] != N])
                #temp = mult(itertools.ifilter(lambda x: x[2] < N - count, s_temp_iter1), itertools.ifilter(lambda x: x[2] != N, t_temp_iter2))
                #run_sum += ( (-1)**(count + 1)/float(count) ) * sum( term[0]*binom(term[1], K) for term in t_temp_iter1 if term[2] == N )temp = mult(s[: N - count], itertools.ifilter(lambda x: x[2] != N, t_temp_iter2))
                #return expls_sum(s_temp_iter2, temp, run_sum, count + 1)
                
                
                #tempHash = {}
                
                """
                
                for key in tempHash.keys():
                    tempHash[key] = mult(s[: N - count], [term for term in tempHash[key] if term[2] != N])
                    
                while hash_too_long(tempHash) > -1:
                    first_long_key = hash_too_long(tempHash)
                    final_key = tempHash.keys()[-1]
                    if len(tempHash[final_key]) > max_list_length:
                        tempHash[final_key + 1] = tempHash[first_long_key][max_list_length:]
                        tempHash[first_long_key] = tempHash[first_long_key][:max_list_length]
                    else:
                        tempHash[final_key] += tempHash[first_long_key][max_list_length:]
                        tempHash[first_long_key] = tempHash[first_long_key][:max_list_length]
                """    
            #return 
            
            
            
            #return expls_sum(s, tempHash, run_sum, count + 1)
    
    
    sum_list = [ [1/float(math.factorial(i)), binom(i, 2), i] for i in xrange(1, N + 1) ]
    sum_copy = copy.copy(sum_list)
    sum_gen = ( [1/float(math.factorial(i)), binom(i, 2), i] for i in xrange(1, N + 1) )
    
    sumHash = {}
    sumHash[0] = sum_list
    
    
    #sum1, sum2 = itertools.tee(summation)
    #summ_copy = ( [1/float(math.factorial(i)), binom(i, 2), i] for i in xrange(1, N + 1) )
    #su = [ [1/(float(math.factorial(i))), binom(i, 2)] for i in range(1, N + 1) ]
    
    """
    run_sum = 0
    
    for n in range(1, N + 1):
        y = itertools.product(range(1, N + 1), repeat=n)
        z = itertools.ifilter(lambda a: sum(a) == n, y)
        w = itertools.ifilter(lambda a: sum(index*item for index, item in enumerate(a)) == N, z)
        l = map(inner_add, w)
        run_sum += ( (-1)**(n+1)/float(n) ) * sum(l)
        
    return str( int( math.factorial(N) * run_sum ) )
    """
    
    running_sum_x_N = expls_sum(sum_list, sum_copy, 0)
    #running_sum_x_N = expls_sum(sum_list, sum_gen, 0, 1)
    #running_sum_x_N = expls_sum(sum_list, sumHash, 0, 1)
    
    return str( int( math.factorial(N) * running_sum_x_N ) )
    
    
    #x_to_N = exponentials(summation, summ_copy, [], N)
    
    #x_to_N = [entry[0]*binom(entry[1], K) for entry in x_to_N]
    
    #len_x_to_N = len(x_to_N)
    
    #return str( int( math.factorial(N) * sum( ( ((-1)**index)/float(index + 1) ) * x_to_N[index] for index in range(0, len_x_to_N) ) ) )
    
    
    
    

print "N = 2, K = 1: ",answer(2, 1)
print "N = 4, K = 3: ",answer(4, 3)	
print "N = 20, K = 19: ",answer(20, 19)
print "N = 20, K = 50: ",answer(20, 50)
print "N = 20, K = 120: ",answer(20, 120)
		    
